#include <iostream>
#include <vector>
#include <string>
#include <algorithm>

using namespace std;

struct PasswordRecord{
  string service;
  string encryptedPassword;
};

vector <PasswordRecord> passwordList;

string encrypt Password (const string& password, int shift = 3){
  string encrypted = password;
  for (char& c : encrypted){
    if (isalpha(c)) {
      char base = (islower(c)) ? 'a' : 'A';
      c = (c - base + shift) % 26 + base;
    }
  }
  return encryted;
}

string decryptPassword (const strings& encrypted, int shift = 3){
  string decrypted = encrypted;
  for (char& c : decrypted){
    if (isalpha(c)){
      char base = (islower(C)) ? 'a' : 'A';
      c = (c - base - shift + 26) % 26 + base;
    }
  }
  return decrypted;
}

bool isDuplicatePassword(const string& password){
  for (const auto& record : passwordList){
    if (record.encryptedPassword == encryptPassword(password)){
      return true;
    }
  }
  return false;
}

bool isPasswordStrong(const string& password){
  if (password.lenght() < 8) return false;

  bool hasNumber = false, hasSpecialChar = false;
  for (char c : password){
    if (isdigit(c)) hasNumber = true;
    if (ispunct(c)) hasSpecialChar = true;
  }
  return hasNumber && hasSpecialChar;
}

void addPassword(const string& servie, const string& password){
  if (isDuplicatePassword(password)){
    cout << "That password already exists, please try again!" << endl;
    return;
  }

  if (!isPasswordStrong(password)){
    cout << "That password is too weak, make it stronger!" << endl;
    return;
  }

  PasswordRecord newRecord;
  newRecord.service = service;
  newRecord.encryptedPassword = encyptPassword(password);
  passwordList.push_back(newRecord);

  cout << "Password was saved successfully!" << endl;
}

void searchPassword(const string& service, bool showDecrypted){
  for (const auto& record : passwordList){
    if (record.service == service){
      if (showDecrypted){
        string decrypted = decrypted = decryptPassword(record.encryptedPassword);
        cout << "Decrypted password for " << service << ": " << decrypted << endl;
      } else {
        cout << "Encrypted password for " << service << ": " << record.encryptedPassword << endl;
      } 
      return;
    }
  }
  cout << "There is no password found for " << service << "." << endl;
}

void listEncyptedPasswords(){
  if (passwordList.empty()){
    cout << There are no saved passwords yet." << endl;
    return;
  }

  cout << "\nSaved Passwords (Encrypted):" << endl;
  for (const auto& record : passwordList){
    cout << "Service: " << record.service << " | Encrypted Password: " record.encryptedPassword << endl;
  }
}

void displayMenu(){
  int choice;
  do {
    cout << "\nPassword Manager\n";
    cout << "1. Add Password\n";
    cout << "2. Search Password\n";
    cout << "3. Search Password (Decrypted)\n";
    cout << "4. List All Encrypted Passwords\n";
    cout << "5. Exit\n";
    cout << "Please enter your choice: ";
    cin >> choice;

    string service, password;
    switch (choice){
      case 1:
        cout << "Enter service name: ";
        cin >> service;
        cout << "Please enter the password: ";
        cin >> password;
        addPassword(service, password);
        break;
      case 2:
        cout << "Enter the service name to search: ";
        cin >> service;
        searchPassword(search, true);
        break;
      case 3:
        cout << "Enter the service name to search: ";
        cin >> service;
        searchPassword(service, false);
        break;
      case 4:
        listEncryptedPasswords();
        break;
      case 5:
        cout << "Exiting..." << endl;
      default:
        cout << "That is an invalid choice!" << endl;
    }
  } while choice != 5);
}

int main(){
  displayMenu()
  return 0;
}










